{"version":3,"file":"utils.js","sourceRoot":"/","sources":["lib/utils.ts"],"names":[],"mappings":";;;;;;AAAA,2DAA4B;AAC5B,uCAAuC;AACvC,6CAAqC;AACrC,+BAA+C;AAExC,KAAK,UAAU,WAAW,CAAC,IAAY,EAAE,QAAgB;IAC9D,IAAI,CAAC;QACH,uCAAuC;QACvC,kDAAkD;QAClD,MAAM,kBAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;QAE1C,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAA;IACjE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAA;IACrD,CAAC;AACH,CAAC;AAVD,kCAUC;AAED,SAAgB,mBAAmB,CACjC,UAAgC,EAChC,KAAc;IAEd,iFAAiF;IACjF,OAAO,UAAU,CAAC,MAAM,CAAoB,CAAC,WAAW,EAAE,gBAAgB,EAAE,EAAE;QAC5E,gFAAgF;QAChF,oFAAoF;QACpF,OAAO,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE;YAC3B,IAAI,KAAK,EAAE,CAAC;gBACV,yDAAyD;gBACzD,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;oBACnC,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,CAAA;gBACpC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,gBAAgB,EAAE,CAAC,CAAA;YACnC,CAAC;iBAAM,CAAC;gBACN,mEAAmE;gBACnE,OAAO,gBAAgB,EAAE,CAAA;YAC3B,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;AACvB,CAAC;AApBD,kDAoBC;AAEM,KAAK,UAAU,eAAe,CAAC,EAAE,OAAO,EAAwB;IACrE,MAAM,OAAO,GAAG,MAAM,mBAAM,CAAC,SAAS,CAAC;QACrC,SAAS,EAAE;YACT;gBACE,OAAO;gBACP,GAAG,EAAE,eAAQ;gBACb,YAAY,EAAE,UAAU;gBACxB,IAAI,EAAE,EAAE;aACT;YACD;gBACE,OAAO;gBACP,GAAG,EAAE,eAAQ;gBACb,YAAY,EAAE,QAAQ;gBACtB,IAAI,EAAE,EAAE;aACT;SACF;QACD,gBAAgB,EAAE,4CAA4C;KAC/D,CAAC,CAAA;IAEF,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAA;AAC5F,CAAC;AApBD,0CAoBC;AAED,SAAgB,yBAAyB,CAAC,SAAiB;IACzD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,CAAA,CAAC,kCAAkC;IAClF,OAAO,IAAI,CAAC,WAAW,EAAE,CAAA;AAC3B,CAAC;AAHD,8DAGC;AAEM,MAAM,SAAS,GAAG,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAA;AAArE,QAAA,SAAS,aAA4D;AAElF,SAAgB,2BAA2B,CAAC,QAAgB;IAC1D,wCAAwC;IACxC,MAAM,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAC1C,sCAAsC;IACtC,OAAO,IAAA,iBAAU,EAAC,YAAY,EAAE,CAAC,CAAC,CAAA;AACpC,CAAC;AALD,kEAKC","sourcesContent":["import fs from 'fs/promises'\nimport { erc20Abi } from 'abitype/abis'\nimport { client } from './evm-client'\nimport { Abi, Address, parseUnits } from 'viem'\n\nexport async function writeToFile(data: string, filePath: string) {\n  try {\n    // Write the data to the specified file\n    // If the file does not exist, it will be created.\n    await fs.writeFile(filePath, data, 'utf8')\n\n    console.log('Logs have been written to the file successfully.')\n  } catch (error) {\n    console.error('Error writing logs to file:', error)\n  }\n}\n\nexport function runPromisesInSeries<T>(\n  promiseFns: (() => Promise<T>)[],\n  delay?: number,\n): Promise<T | void> {\n  // Start with a Promise<void> to ensure compatibility with the accumulator's type\n  return promiseFns.reduce<Promise<T | void>>((prevPromise, currentPromiseFn) => {\n    // Chain the current promise to the accumulator after the previous one completes\n    // Here, we ignore the result of the previous promise, as we're focusing on chaining\n    return prevPromise.then(() => {\n      if (delay) {\n        // Introduce a delay before executing the current promise\n        return new Promise<void>((resolve) => {\n          setTimeout(() => resolve(), delay)\n        }).then(() => currentPromiseFn())\n      } else {\n        // If no delay is provided, execute the current promise immediately\n        return currentPromiseFn()\n      }\n    })\n  }, Promise.resolve())\n}\n\nexport async function getTokenDetails({ address }: { address: Address }) {\n  const results = await client.multicall({\n    contracts: [\n      {\n        address,\n        abi: erc20Abi,\n        functionName: 'decimals',\n        args: [],\n      },\n      {\n        address,\n        abi: erc20Abi,\n        functionName: 'symbol',\n        args: [],\n      },\n    ],\n    multicallAddress: '0xcA11bde05977b3631167028862bE2a173976CA11',\n  })\n\n  return { address, decimals: Number(results[0].result), symbol: String(results[1].result) }\n}\n\nexport function bigintToPostgresTimestamp(timestamp: bigint): string {\n  const date = new Date(Number(timestamp) * 1000) // Convert seconds to milliseconds\n  return date.toISOString()\n}\n\nexport const getEvents = (abi: Abi) => abi.filter((item) => item.type === 'event')\n\nexport function convertToBigIntWithDecimals(quantity: string): BigInt {\n  // Extract the numeric value as a string\n  const [numericValue] = quantity.split(' ')\n  // Always use 6 decimals in parseUnits\n  return parseUnits(numericValue, 6)\n}\n"]}
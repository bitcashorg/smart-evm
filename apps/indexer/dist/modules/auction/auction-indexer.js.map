{"version":3,"file":"auction-indexer.js","sourceRoot":"/","sources":["modules/auction/auction-indexer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Log, stringify } from 'viem'\nimport { client } from '~/lib/evm-client'\nimport { TestnetEasyAuction } from 'smartsale-contracts'\nimport {\n  bigintToPostgresTimestamp,\n  getEvents,\n  getTokenDetails,\n  runPromisesInSeries,\n} from '~/lib/utils'\nimport { NewAuctionEvent, NewSellOrderEvent, NewUserEvent } from '~/modules/auction/auction.type'\n\nimport BN from 'bn.js'\nimport { eosEvmTestnet } from 'smartsale-env'\nimport { upsertAuctionDetail, upsertOrder } from '~/lib/supabase-client'\n\nexport async function startAuctionIndexer() {\n  console.log('indexing starting')\n\n  // await writeToFile(stringify(TestnetEasyAuction.getEvents(), null, 2), './events.json')\n  // Get historical event logs\n  const blockNumber = await client.getBlockNumber()\n  const events = getEvents(TestnetEasyAuction.abi)\n  const logs = await client.getLogs({\n    events,\n    fromBlock: BigInt(TestnetEasyAuction.indexFromBlock),\n    toBlock: blockNumber,\n  })\n  processLogs(logs)\n\n  // const filteredlogs = logs.filter((log) => log.eventName !== 'OwnershipTransferred')\n\n  // console.log(\n  //   stringify(parseEventLogs({ abi: TestnetEasyAuction.abi, logs: filteredlogs }), null, 2),\n  // )\n  // await writeToFile(stringify(, null, 2), './logs.json')\n\n  // Watch for new event logs\n  client.watchEvent({\n    events,\n    onLogs: (logs) => {\n      const filteredlogs = logs.filter((log) => log.eventName !== 'OwnershipTransferred')\n      console.log('real time', stringify(filteredlogs, null, 2))\n      processLogs(logs)\n    },\n  })\n}\n\n// takes the generic logs and if the eventName matches one of the eventHandlers keys\n// it passes the log to corresponding hanlder function\nasync function processLogs(logs: Log[]) {\n  const actions = logs\n    .map((log) => {\n      const eventName = (log as any).eventName.toString()\n      if (!(eventName in eventHandlers)) return null\n      return async () => {\n        try {\n          eventHandlers[eventName] && eventHandlers[eventName](log)\n        } catch (error) {\n          //TODO: sent sentry reports\n          console.error(error)\n        }\n      }\n    })\n    .filter((action): action is () => Promise<void> => action !== null)\n\n  runPromisesInSeries(actions)\n}\n\nconst eventHandlers: { [key: string]: (log: any) => void } = {\n  AuctionCleared: handleAuctionCleared,\n  CancellationSellOrder: handleCancellationSellOrder,\n  ClaimedFromOrder: handleClaimedFromOrder,\n  NewAuction: handleNewAuction,\n  NewSellOrder: handleNewSellOrder,\n  NewUser: handleNewUser,\n  OwnershipTransferred: handleOwnershipTransferred,\n  UserRegistration: handleUserRegistration,\n}\n\nfunction handleAuctionCleared(log: any) {\n  // console.log('handleAuctionCleared', log)\n}\n\nfunction handleCancellationSellOrder(log: any) {\n  // console.log('handleCancellationSellOrder', log)\n}\n\nfunction handleClaimedFromOrder(log: any) {\n  // console.log('handleClaimedFromOrder', log)\n}\n\nasync function handleNewAuction(log: NewAuctionEvent) {\n  // console.log('handleNewAuction', log.args, typeof log.args)\n\n  const auctioningToken = await getTokenDetails({ address: log.args._auctioningToken })\n  const biddingToken = await getTokenDetails({ address: log.args._biddingToken })\n\n  const data = {\n    // id bigint generated by default as identity,\n    // created_at timestamp with time zone not null default now(),\n    exact_order_id: new BN(log.args.auctionId.toString()).toNumber(),\n    chain_id: eosEvmTestnet.id,\n    symbol_auctioning_token: auctioningToken.symbol,\n    symbol_bidding_token: biddingToken.symbol,\n    address_auctioning_token: auctioningToken.address,\n    address_bidding_token: biddingToken.address,\n    decimals_auctioning_token: auctioningToken.decimals,\n    decimals_bidding_token: biddingToken.decimals,\n    end_time_timestamp: bigintToPostgresTimestamp(log.args.auctionEndDate),\n    order_cancellation_end_date: bigintToPostgresTimestamp(log.args.orderCancellationEndDate),\n    // starting_time_stamp timestamp without time zone null,\n    // minimum_bidding_amount_per_order: new BN(\n    //   log.args.minimumBiddingAmountPerOrder.toString(),\n    // ).toNumber(),\n    // min_funding_threshold: new BN(log.args.minFundingThreshold.toString()).toNumber(),\n\n    // review this values.\n    // allow_list_manager: log.args.allowListContract,\n    // allow_list_signer: log.args.allowListData,\n\n    // current_volume integer null,\n    // current_clearing_order_sell_amount bigint null,\n    // current_clearing_order_buy_amount bigint null,\n    // current_clearing_price integer null,\n    // current_bidding_amount bigint null,\n    // is_atomic_closure_allowed boolean null,\n    // is_private_auction boolean null,\n    // interest_score integer null,\n\n    // TODO: add this to schema\n    // _auctionedSellAmount: 100000n,\n    // _minBuyAmount: 50000000n,\n  }\n\n  // console.log('handleNewAuction:: data for postgres db', data)\n  try {\n    const result = await upsertAuctionDetail(data)\n    console.log('result', result)\n  } catch (error) {\n    console.log(error)\n    process.exit(0)\n  }\n}\n\nasync function handleNewSellOrder(log: NewSellOrderEvent) {\n  console.log('handleNewSellOrder', log)\n\n  if (!log.transactionHash) return\n\n  const data = {\n    auction_id: Number(log.args.auctionId),\n    sell_amount: Number(log.args.sellAmount),\n    buy_amount: Number(log.args.buyAmount),\n    user_id: Number(log.args.userId),\n    transactionHash: log.transactionHash,\n  }\n  const result = await upsertOrder(data)\n\n  console.log(result)\n}\n\nfunction handleNewUser({ args }: NewUserEvent) {\n  // console.log('handleNewUser', args)\n  // const result = db.users.upsert({\n  //   where: {\n  //     id: { equals: args.userId },\n  //   },\n  //   update: args,\n  //   create: args,\n  // })\n}\n\nfunction handleOwnershipTransferred(log: any) {\n  // console.log('handleOwnershipTransferred', log)\n}\n\nfunction handleUserRegistration(log: any) {\n  // console.log('handleUserRegistration', log)\n}\n"]}
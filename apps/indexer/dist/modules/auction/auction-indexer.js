"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startAuctionIndexer = void 0;
const viem_1 = require("viem");
const evm_client_1 = require("~/lib/evm-client");
const smartsale_contracts_1 = require("smartsale-contracts");
const utils_1 = require("~/lib/utils");
const bn_js_1 = __importDefault(require("bn.js"));
const smartsale_env_1 = require("smartsale-env");
const supabase_client_1 = require("~/lib/supabase-client");
async function startAuctionIndexer() {
    console.log('indexing starting');
    // await writeToFile(stringify(TestnetEasyAuction.getEvents(), null, 2), './events.json')
    // Get historical event logs
    const blockNumber = await evm_client_1.client.getBlockNumber();
    const events = (0, utils_1.getEvents)(smartsale_contracts_1.TestnetEasyAuction.abi);
    const logs = await evm_client_1.client.getLogs({
        events,
        fromBlock: BigInt(smartsale_contracts_1.TestnetEasyAuction.indexFromBlock),
        toBlock: blockNumber,
    });
    processLogs(logs);
    // const filteredlogs = logs.filter((log) => log.eventName !== 'OwnershipTransferred')
    // console.log(
    //   stringify(parseEventLogs({ abi: TestnetEasyAuction.abi, logs: filteredlogs }), null, 2),
    // )
    // await writeToFile(stringify(, null, 2), './logs.json')
    // Watch for new event logs
    evm_client_1.client.watchEvent({
        events,
        onLogs: (logs) => {
            const filteredlogs = logs.filter((log) => log.eventName !== 'OwnershipTransferred');
            console.log('real time', (0, viem_1.stringify)(filteredlogs, null, 2));
            processLogs(logs);
        },
    });
}
exports.startAuctionIndexer = startAuctionIndexer;
// takes the generic logs and if the eventName matches one of the eventHandlers keys
// it passes the log to corresponding hanlder function
async function processLogs(logs) {
    const actions = logs
        .map((log) => {
        const eventName = log.eventName.toString();
        if (!(eventName in eventHandlers))
            return null;
        return async () => {
            try {
                eventHandlers[eventName] && eventHandlers[eventName](log);
            }
            catch (error) {
                //TODO: sent sentry reports
                console.error(error);
            }
        };
    })
        .filter((action) => action !== null);
    (0, utils_1.runPromisesInSeries)(actions);
}
const eventHandlers = {
    AuctionCleared: handleAuctionCleared,
    CancellationSellOrder: handleCancellationSellOrder,
    ClaimedFromOrder: handleClaimedFromOrder,
    NewAuction: handleNewAuction,
    NewSellOrder: handleNewSellOrder,
    NewUser: handleNewUser,
    OwnershipTransferred: handleOwnershipTransferred,
    UserRegistration: handleUserRegistration,
};
function handleAuctionCleared(log) {
    // console.log('handleAuctionCleared', log)
}
function handleCancellationSellOrder(log) {
    // console.log('handleCancellationSellOrder', log)
}
function handleClaimedFromOrder(log) {
    // console.log('handleClaimedFromOrder', log)
}
async function handleNewAuction(log) {
    // console.log('handleNewAuction', log.args, typeof log.args)
    const auctioningToken = await (0, utils_1.getTokenDetails)({ address: log.args._auctioningToken });
    const biddingToken = await (0, utils_1.getTokenDetails)({ address: log.args._biddingToken });
    const data = {
        // id bigint generated by default as identity,
        // created_at timestamp with time zone not null default now(),
        exact_order_id: new bn_js_1.default(log.args.auctionId.toString()).toNumber(),
        chain_id: smartsale_env_1.eosEvmTestnet.id,
        symbol_auctioning_token: auctioningToken.symbol,
        symbol_bidding_token: biddingToken.symbol,
        address_auctioning_token: auctioningToken.address,
        address_bidding_token: biddingToken.address,
        decimals_auctioning_token: auctioningToken.decimals,
        decimals_bidding_token: biddingToken.decimals,
        end_time_timestamp: (0, utils_1.bigintToPostgresTimestamp)(log.args.auctionEndDate),
        order_cancellation_end_date: (0, utils_1.bigintToPostgresTimestamp)(log.args.orderCancellationEndDate),
        // starting_time_stamp timestamp without time zone null,
        // minimum_bidding_amount_per_order: new BN(
        //   log.args.minimumBiddingAmountPerOrder.toString(),
        // ).toNumber(),
        // min_funding_threshold: new BN(log.args.minFundingThreshold.toString()).toNumber(),
        // review this values.
        // allow_list_manager: log.args.allowListContract,
        // allow_list_signer: log.args.allowListData,
        // current_volume integer null,
        // current_clearing_order_sell_amount bigint null,
        // current_clearing_order_buy_amount bigint null,
        // current_clearing_price integer null,
        // current_bidding_amount bigint null,
        // is_atomic_closure_allowed boolean null,
        // is_private_auction boolean null,
        // interest_score integer null,
        // TODO: add this to schema
        // _auctionedSellAmount: 100000n,
        // _minBuyAmount: 50000000n,
    };
    // console.log('handleNewAuction:: data for postgres db', data)
    try {
        const result = await (0, supabase_client_1.upsertAuctionDetail)(data);
        console.log('result', result);
    }
    catch (error) {
        console.log(error);
        process.exit(0);
    }
}
async function handleNewSellOrder(log) {
    console.log('handleNewSellOrder', log);
    if (!log.transactionHash)
        return;
    const data = {
        auction_id: Number(log.args.auctionId),
        sell_amount: Number(log.args.sellAmount),
        buy_amount: Number(log.args.buyAmount),
        user_id: Number(log.args.userId),
        transactionHash: log.transactionHash,
    };
    const result = await (0, supabase_client_1.upsertOrder)(data);
    console.log(result);
}
function handleNewUser({ args }) {
    // console.log('handleNewUser', args)
    // const result = db.users.upsert({
    //   where: {
    //     id: { equals: args.userId },
    //   },
    //   update: args,
    //   create: args,
    // })
}
function handleOwnershipTransferred(log) {
    // console.log('handleOwnershipTransferred', log)
}
function handleUserRegistration(log) {
    // console.log('handleUserRegistration', log)
}
//# sourceMappingURL=auction-indexer.js.map
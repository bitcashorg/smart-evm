{"version":3,"file":"evm-transfers.js","sourceRoot":"/","sources":["modules/swaps/evm-transfers.ts"],"names":[],"mappings":"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","sourcesContent":["import { EVMTokenContractData, SepoliaUSDT, TestnetUSDT } from 'smartsale-contracts'\nimport { runPromisesInSeries } from '~/lib/utils'\n\nimport { Address, Log, PublicClient, createPublicClient, http, parseAbiItem, stringify } from 'viem'\nimport { TransferEvent } from '~/modules/auction/auction.type'\nimport { sepolia } from 'viem/chains'\nimport { smartsaleChains } from 'smartsale-env'\nimport { issueTokens } from './cred-issuer'\n\nconst tokens: EVMTokenContractData[] = [SepoliaUSDT, TestnetUSDT]\n\nexport async function listenToEvmTransfers() {\n  console.log('subscribing to evm usdt transfers ...')\n  tokens.map(listenToEvmTransfersFn)\n}\n\nasync function listenToEvmTransfersFn(token: EVMTokenContractData) {\n  const chain = smartsaleChains.test.get(token.chainId)\n  if (!chain) return\n  console.log(`listening usdt transfers for token ${token.symbol} on chain ${chain.name}`)\n  const client: PublicClient = createPublicClient({\n    chain,\n    transport: http(),\n  })\n  try {\n    const logs = await client.getLogs({\n      address: token.address,\n      event: parseAbiItem(\n        'event Transfer(address indexed from, address indexed to, uint256 value)',\n      ),\n      args: {\n        to: '0x2C9DAAb3F463d6c6D248aCbeaAEe98687936374a',\n      },\n      fromBlock: BigInt(token.indexFromBlock),\n    })\n\n    // delay prevents idempotent transactions:\n    processLogs(logs, 3000)\n\n    // Watch for new event logs\n    client.watchEvent({\n      address: token.address,\n      event: parseAbiItem(\n        'event Transfer(address indexed from, address indexed to, uint256 value)',\n      ),\n      args: {\n        to: '0x2C9DAAb3F463d6c6D248aCbeaAEe98687936374a',\n      },\n      onLogs: (logs) => {\n        console.log('real time transfer', stringify(logs, null, 2))\n        processLogs(logs)\n      },\n    })\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n// takes the generic logs and if the eventName matches one of the eventHandlers keys\n// it passes the log to corresponding hanlder function\nasync function processLogs(logs: Log[], delay = 0) {\n  const actions = logs\n    .map((log) => {\n      const eventName = (log as any).eventName.toString()\n      if (!(eventName in eventHandlers)) return null\n      return async () => {\n        try {\n          eventHandlers[eventName] && eventHandlers[eventName](log)\n        } catch (error) {\n          //TODO: sent sentry reports\n          console.error(error)\n        }\n      }\n    })\n    .filter((action): action is () => Promise<void> => action !== null)\n\n  runPromisesInSeries(actions, delay)\n}\n\nconst eventHandlers: { [key: string]: (log: any) => void } = {\n  Transfer: handleTransfer,\n}\n\nasync function handleTransfer(log: TransferEvent) {\n  const data = {\n    trx_hash: log.transactionHash!,\n    from: log.args.from as Address,\n    to: log.args.to as Address,\n    amount: log.args.value,\n    token: log.address,\n    chain_id: sepolia.id,\n    type: 'deposit',\n  }\n\n  // const result = await db.transfers.upsert({\n  //   where: {\n  //     trx_hash: log.transactionHash!,\n  //   },\n  //   update: data,\n  //   create: data,\n  // })\n\n  // console.log('result', result)\n  // if (result.usdcred_trx || data.from === '0x0000000000000000000000000000000000000000') return\n\n  // const usdcred_trx = (await issueTokens(data.from, data.amount)) as Address\n\n  // if (!usdcred_trx) return\n\n  // await db.transfers.update({\n  //   where: {\n  //     trx_hash: log.transactionHash!,\n  //   },\n  //   data: { usdcred_trx },\n  // })\n\n  // console.log('tokens issued', { usdcred_trx, trx: log.transactionHash })\n}\n"]}
{"version":3,"file":"dfuse-client.js","sourceRoot":"/","sources":["modules/swaps/dfuse-client.ts"],"names":[],"mappings":";;;;;;AAAA,0CAAyF;AACzF,qCAAiC;AACjC,4DAAkC;AAClC,4CAAgC;AAChC,oDAAiC;AAGpB,QAAA,KAAK,GAAG,IAAA,0BAAiB,EAAC;IACrC,MAAM,EAAE,eAAM,CAAC,GAAG,CAAC,QAAQ;IAC3B,OAAO,EAAE,wBAAwB;IACjC,wBAAwB;IACxB,iBAAiB,EAAE;QACjB,KAAK,EAAE,oBAAS;KACjB;IACD,0BAA0B,EAAE;QAC1B,aAAa,EAAE;YACb,aAAa;YACb,gBAAgB,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC;SACjE;KACF;IACD,mBAAmB,EAAE;QACnB,aAAa,EAAE;YACb,aAAa;YACb,gBAAgB;SACjB;KACF;CACF,CAAC,CAAA;AAEK,KAAK,UAAU,0BAA0B,CAAC,KAAa;IAC5D,MAAM,YAAY,GAAG,IAAI,gBAAY,EAAE,CAAA;IAEvC,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAA;IACvD,MAAM,eAAe,GAAW;wCACM,KAAK;;;;;;;;;IASzC,CAAA;IAEF,MAAM,MAAM,GAAG,MAAM,aAAK,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,OAAkC,EAAE,EAAE;QACzF,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAC5B,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAA;YAC7D,MAAM,IAAI,GAAG;gBACX,KAAK,EAAE,QAAQ,CAAC,EAAE;gBAClB,OAAO,EAAE,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAO,EAAE,EAAE,CAAC,IAAI,CAAC;aAC/D,CAAA;YACD,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;YAC/B,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;QACtD,CAAC;QAED,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC7B,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAA;QACvE,CAAC;QAED,IAAI,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;QACjC,CAAC;IACH,CAAC,CAAC,CAAA;IAEF,OAAO,EAAE,EAAE,EAAE,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAA;AACxC,CAAC;AArCD,gEAqCC;AAED,KAAK,UAAU,gBAAgB,CAAC,GAAW,EAAE,YAAsB,EAAE;IACnE,MAAM,SAAS,GAAG,IAAI,YAAe,CAAC,GAAG,EAAE,SAAS,EAAE;QACpD,gBAAgB,EAAE,EAAE,GAAG,IAAI,EAAE,MAAM;QACnC,UAAU,EAAE,GAAG,GAAG,IAAI,GAAG,GAAG,EAAE,QAAQ;KACvC,CAAC,CAAA;IACF,MAAM,SAAS,GAAG,CAAC,QAAyB,EAAE,EAAE;QAC9C,yDAAyD;QACzD,2DAA2D;QAC3D,SAAS,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;IAChD,CAAC,CAAA;IAED,SAAS,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;IAElC,aAAa;IACb,OAAO,SAAS,CAAA;AAClB,CAAC;AAED,qCAAqC;AACrC,CAAC;AAAC,MAAc,CAAC,KAAK,GAAG,oBAAS,CACjC;AAAC,MAAc,CAAC,SAAS,GAAG,YAAe,CAAA","sourcesContent":["import { GraphqlStreamMessage, WebSocketFactory, createDfuseClient } from '@dfuse/client'\nimport { appenv } from '~/config'\nimport nodeFetch from 'node-fetch'\nimport WebSocketClient from 'ws'\nimport EventEmitter from 'events'\nimport { IncomingMessage } from 'http'\n\nexport const dfuse = createDfuseClient({\n  apiKey: appenv.eos.dfuseKey,\n  network: 'eos.dfuse.eosnation.io',\n  // authentication: true,\n  httpClientOptions: {\n    fetch: nodeFetch,\n  },\n  graphqlStreamClientOptions: {\n    socketOptions: {\n      // @ts-ignore\n      webSocketFactory: (url) => webSocketFactory(url, ['graphql-ws']),\n    },\n  },\n  streamClientOptions: {\n    socketOptions: {\n      // @ts-ignore\n      webSocketFactory,\n    },\n  },\n})\n\nexport async function createFirehoseSubscription(query: string) {\n  const eventEmitter = new EventEmitter()\n\n  console.log('createFirehoseSubscription query:', query)\n  const streamTransfers: string = `subscription {\n    searchTransactionsForward(query: \"${query}\") {\n      undo cursor\n      trace {\n        id\n        matchingActions {\n          json\n        }\n      }\n    }\n  }`\n\n  const stream = await dfuse.graphql(streamTransfers, (message: GraphqlStreamMessage<any>) => {\n    if (message.type === 'data') {\n      const transfer = message.data.searchTransactionsForward.trace\n      const data = {\n        trxId: transfer.id,\n        actions: transfer.matchingActions.map(({ json }: any) => json),\n      }\n      eventEmitter.emit('data', data)\n      console.log('Token Transfer:', JSON.stringify(data))\n    }\n\n    if (message.type === 'error') {\n      console.error('An error occurred:', message.errors, message.terminal)\n    }\n\n    if (message.type === 'complete') {\n      console.log('Stream completed')\n    }\n  })\n\n  return { on: eventEmitter.on, stream }\n}\n\nasync function webSocketFactory(url: string, protocols: string[] = []): Promise<WebSocketFactory> {\n  const webSocket = new WebSocketClient(url, protocols, {\n    handshakeTimeout: 30 * 1000, // 30s\n    maxPayload: 100 * 1024 * 100, // 100Mb\n  })\n  const onUpgrade = (response: IncomingMessage) => {\n    // Removing the listener at this point since this factory\n    // is called at each reconnection with the remote endpoint!\n    webSocket.removeListener('upgrade', onUpgrade)\n  }\n\n  webSocket.on('upgrade', onUpgrade)\n\n  // @ts-ignore\n  return webSocket\n}\n\n// necessary for dfuse client to work\n;(global as any).fetch = nodeFetch\n;(global as any).WebSocket = WebSocketClient\n"]}